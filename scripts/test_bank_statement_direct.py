#!/usr/bin/env python3
"""
Test directo del procesador de estados de cuenta bancarios
"""
import sys
import os

# Agregar el directorio del proyecto al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

def create_test_bank_statement():
    """Crea un estado de cuenta bancario de prueba"""
    filename = "test_bank_statement.pdf"
    
    try:
        c = canvas.Canvas(filename, pagesize=letter)
        
        # Header del estado de cuenta
        c.drawString(50, 750, "ESTADO DE CUENTA BANCARIO")
        c.drawString(50, 730, "Banco: BBVA")
        c.drawString(50, 710, "Cuenta: 1234-5678-9012-3456")
        c.drawString(50, 690, "Cliente: EMPRESA ABC S.A. DE C.V.")
        c.drawString(50, 670, "Per√≠odo: Enero 2025")
        
        # Headers de columnas
        c.drawString(50, 640, "FECHA")
        c.drawString(120, 640, "REFERENCIA")
        c.drawString(200, 640, "CONCEPTO")
        c.drawString(350, 640, "CARGOS")
        c.drawString(420, 640, "ABONOS")
        c.drawString(490, 640, "SALDO")
        
        # L√≠nea separadora
        c.line(50, 635, 550, 635)
        
        # Movimientos de ejemplo
        movimientos = [
            ("01/01/2025", "REF001", "SALDO INICIAL", "", "", "100,000.00"),
            ("02/01/2025", "REF002", "PAGO PROVEEDOR", "15,000.00", "", "85,000.00"),
            ("03/01/2025", "REF003", "DEP√ìSITO CLIENTE", "", "25,000.00", "110,000.00"),
            ("04/01/2025", "REF004", "COMISI√ìN BANCARIA", "500.00", "", "109,500.00"),
            ("05/01/2025", "REF005", "PAGO N√ìMINA", "45,000.00", "", "64,500.00"),
            ("06/01/2025", "REF006", "VENTA PRODUCTOS", "", "30,000.00", "94,500.00"),
            ("07/01/2025", "REF007", "PAGO SERVICIOS", "8,500.00", "", "86,000.00"),
            ("08/01/2025", "REF008", "DEP√ìSITO EFECTIVO", "", "12,000.00", "98,000.00"),
            ("09/01/2025", "REF009", "PAGO IMPUESTOS", "22,000.00", "", "76,000.00"),
            ("10/01/2025", "REF010", "INGRESO VENTAS", "", "18,500.00", "94,500.00"),
        ]
        
        y_pos = 620
        for fecha, ref, concepto, cargos, abonos, saldo in movimientos:
            c.drawString(50, y_pos, fecha)
            c.drawString(120, y_pos, ref)
            c.drawString(200, y_pos, concepto)
            c.drawString(350, y_pos, cargos)
            c.drawString(420, y_pos, abonos)
            c.drawString(490, y_pos, saldo)
            y_pos -= 20
        
        # Totales
        c.line(50, y_pos - 10, 550, y_pos - 10)
        y_pos -= 30
        
        c.drawString(200, y_pos, "TOTALES:")
        c.drawString(350, y_pos, "91,000.00")
        c.drawString(420, y_pos, "85,500.00")
        c.drawString(490, y_pos, "94,500.00")
        
        # Informaci√≥n adicional
        c.drawString(50, 200, "Resumen:")
        c.drawString(50, 180, "Total Cargos: $91,000.00")
        c.drawString(50, 160, "Total Abonos: $85,500.00")
        c.drawString(50, 140, "Saldo Final: $94,500.00")
        
        c.save()
        print(f"‚úÖ Estado de cuenta de prueba creado: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå Error creando estado de cuenta: {e}")
        return None

def test_bank_statement_processor(pdf_file):
    """Prueba el procesador de estados de cuenta"""
    print(f"\nüè¶ PROBANDO PROCESADOR DE ESTADOS DE CUENTA")
    print("-" * 60)
    
    try:
        # Importar el procesador directamente
        from app.conciliacion.bank_statement_processor import BankStatementProcessor
        
        # Leer el PDF
        with open(pdf_file, 'rb') as f:
            pdf_bytes = f.read()
        
        # Crear procesador
        processor = BankStatementProcessor()
        
        # Procesar estado de cuenta
        print("üìÑ Procesando estado de cuenta...")
        resultado = processor.procesar_estado_cuenta(pdf_bytes)
        
        print("‚úÖ Estado de cuenta procesado exitosamente")
        print(f"   üìä Movimientos extra√≠dos: {resultado.get('total_movimientos', 0)}")
        print(f"   üè∑Ô∏è Columnas encontradas: {resultado.get('estructura_columnas', {}).get('columnas_encontradas', [])}")
        print(f"   üí∞ Tipo de documento: {resultado.get('tipo', 'N/A')}")
        
        # Mostrar estructura de columnas
        estructura = resultado.get('estructura_columnas', {})
        if estructura.get('columnas_encontradas'):
            print(f"\n   üìã Columnas identificadas:")
            for columna in estructura['columnas_encontradas']:
                print(f"      ‚Ä¢ {columna}")
        
        # Mostrar movimientos
        movimientos = resultado.get('movimientos', [])
        if movimientos:
            print(f"\n   üìä Primeros 5 movimientos:")
            for i, mov in enumerate(movimientos[:5]):
                fecha = mov.get('fecha', 'N/A')
                if isinstance(fecha, datetime):
                    fecha = fecha.strftime("%d/%m/%Y")
                concepto = mov.get('concepto', 'N/A')
                cargos = mov.get('cargos', 0) or 0
                abonos = mov.get('abonos', 0) or 0
                print(f"      {i+1}. {fecha} | {concepto[:30]} | C:${cargos:,.2f} | A:${abonos:,.2f}")
        
        # Mostrar saldos
        saldos = resultado.get('saldos', {})
        if saldos and 'error' not in saldos:
            print(f"\n   üí∞ Estad√≠sticas:")
            print(f"      Total Cargos: ${saldos.get('total_cargos', 0):,.2f}")
            print(f"      Total Abonos: ${saldos.get('total_abonos', 0):,.2f}")
            print(f"      Saldo Final: ${saldos.get('saldo_final', 0):,.2f}")
        
        # Probar extracci√≥n con tablas
        print(f"\nüîç Probando extracci√≥n con tablas...")
        resultado_tablas = processor.procesar_con_tablas(pdf_bytes)
        
        print(f"   üìä Tablas encontradas: {resultado_tablas.get('tablas_encontradas', 0)}")
        print(f"   üìÑ Movimientos por tablas: {resultado_tablas.get('total_movimientos', 0)}")
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error procesando estado de cuenta: {e}")
        return None

def test_specific_patterns():
    """Prueba patrones espec√≠ficos de columnas bancarias"""
    print(f"\nüîç PROBANDO PATRONES ESPEC√çFICOS")
    print("-" * 50)
    
    try:
        from app.conciliacion.bank_statement_processor import BankStatementProcessor
        
        processor = BankStatementProcessor()
        
        # Textos de prueba
        textos_prueba = [
            "FECHA REFERENCIA CONCEPTO CARGOS ABONOS SALDO",
            "FECHA OPER LIQ COD. DESCRIPCI√ìN REFERENCIA CARGOS ABONOS OPERACI√ìN LIQUIDACI√ìN",
            "FECHA SALDO OPER LIQ COD. DESCRIPCI√ìN REFERENCIA CARGOS ABONOS",
            "FECHA REFERENCIA CONCEPTO CARGOS ABONOS SALDO FECHA SALDO"
        ]
        
        for i, texto in enumerate(textos_prueba, 1):
            print(f"\n   Prueba {i}: {texto}")
            estructura = processor._identificar_estructura_columnas(texto)
            columnas = estructura.get('columnas_encontradas', [])
            print(f"      Columnas detectadas: {columnas}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando patrones: {e}")
        return False

def main():
    print("üè¶ TEST DIRECTO DEL PROCESADOR DE ESTADOS DE CUENTA BANCARIOS")
    print("=" * 90)
    
    # 1. Probar patrones espec√≠ficos
    test_specific_patterns()
    
    # 2. Crear estado de cuenta de prueba
    pdf_file = create_test_bank_statement()
    if not pdf_file:
        print("‚ùå No se pudo crear estado de cuenta de prueba")
        return
    
    try:
        # 3. Probar procesador de estados de cuenta
        resultado = test_bank_statement_processor(pdf_file)
        
        # 4. An√°lisis final
        print(f"\nüéØ AN√ÅLISIS FINAL")
        print("=" * 50)
        
        if resultado:
            print("‚úÖ Procesador de estados de cuenta funcionando correctamente")
            print(f"   üìä Extrajo {len(resultado.get('movimientos', []))} movimientos")
            print(f"   üè∑Ô∏è Identific√≥ {len(resultado.get('estructura_columnas', {}).get('columnas_encontradas', []))} columnas")
            print(f"   üí° Usa patrones espec√≠ficos para estados de cuenta bancarios")
        else:
            print("‚ùå Problemas con el procesador de estados de cuenta")
        
        print(f"\nüí° CARACTER√çSTICAS IMPLEMENTADAS:")
        print("   1. ‚úÖ Detecci√≥n de columnas bancarias espec√≠ficas")
        print("   2. ‚úÖ Extracci√≥n de movimientos con fechas y montos")
        print("   3. ‚úÖ C√°lculo de saldos y estad√≠sticas")
        print("   4. ‚úÖ Procesamiento con tablas estructuradas")
        print("   5. ‚úÖ Patrones para FECHA, REFERENCIA, CONCEPTO, CARGOS, ABONOS, SALDO")
        print("   6. ‚úÖ Validaci√≥n de estructura de datos")
        print("   7. ‚úÖ M√©tricas de extracci√≥n")
        
        print(f"\nüéØ PATRONES ESPEC√çFICOS DETECTADOS:")
        print("   ‚Ä¢ FECHA REFERENCIA CONCEPTO CARGOS ABONOS SALDO")
        print("   ‚Ä¢ FECHA OPER LIQ COD. DESCRIPCI√ìN REFERENCIA CARGOS ABONOS")
        print("   ‚Ä¢ FECHA SALDO OPER LIQ COD. DESCRIPCI√ìN REFERENCIA CARGOS ABONOS")
        
    finally:
        # Limpiar archivo de prueba
        try:
            os.remove(pdf_file)
            print(f"\nüßπ Archivo de prueba eliminado: {pdf_file}")
        except:
            pass

if __name__ == "__main__":
    main() 