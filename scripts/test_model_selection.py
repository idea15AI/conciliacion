#!/usr/bin/env python3
"""
Script para probar la selecci√≥n autom√°tica de modelo basada en el n√∫mero de p√°ginas
"""

import os
import sys
import tempfile
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.conciliacion.gemini_processor import GeminiProcessor

def crear_pdf_simple(nombre_archivo: str, num_paginas: int = 1):
    """Crea un PDF simple con el n√∫mero especificado de p√°ginas"""
    c = canvas.Canvas(nombre_archivo, pagesize=letter)
    
    for i in range(num_paginas):
        c.drawString(100, 750, f"P√°gina {i+1} de {num_paginas}")
        c.drawString(100, 700, "DETALLE DE TRANSACCIONES REALIZADAS")
        c.drawString(100, 650, "FECHA | CONCEPTO | DISPOSICIONES | PAGOS")
        c.drawString(100, 600, "15/01/24 | PAGO DE INTER√âS | $0.00 | $25,187.50")
        c.drawString(100, 550, "15/01/24 | PAGO DE CAPITAL | $0.00 | $83,333.33")
        
        if i < num_paginas - 1:
            c.showPage()
    
    c.save()
    print(f"‚úÖ PDF creado: {nombre_archivo} con {num_paginas} p√°ginas")

def probar_seleccion_modelo():
    """Prueba la selecci√≥n autom√°tica de modelo"""
    processor = GeminiProcessor()
    
    # Crear PDFs de prueba con diferentes n√∫meros de p√°ginas
    casos_prueba = [
        ("test_1_pagina.pdf", 1),    # Deber√≠a usar flash-lite
        ("test_3_paginas.pdf", 3),   # Deber√≠a usar flash-lite
        ("test_6_paginas.pdf", 6),   # Deber√≠a usar flash-lite
        ("test_10_paginas.pdf", 10), # Deber√≠a usar flash-lite
        ("test_15_paginas.pdf", 15), # Deber√≠a usar flash
    ]
    
    print("üß™ Probando selecci√≥n autom√°tica de modelo...")
    print("=" * 60)
    
    for nombre_archivo, num_paginas in casos_prueba:
        try:
            # Crear PDF de prueba
            crear_pdf_simple(nombre_archivo, num_paginas)
            
            # Probar selecci√≥n de modelo
            modelo_seleccionado = processor._determinar_modelo_por_paginas(nombre_archivo)
            
            print(f"üìÑ {nombre_archivo} ({num_paginas} p√°ginas)")
            print(f"   Modelo seleccionado: {modelo_seleccionado}")
            
            # Verificar que la selecci√≥n es correcta
            if num_paginas <= 10 and "lite" in modelo_seleccionado:
                print("   ‚úÖ CORRECTO: flash-lite para documento peque√±o")
            elif num_paginas > 10 and "lite" not in modelo_seleccionado:
                print("   ‚úÖ CORRECTO: flash para documento grande")
            else:
                print("   ‚ùå INCORRECTO: selecci√≥n de modelo inesperada")
            
            print()
            
        except Exception as e:
            print(f"‚ùå Error probando {nombre_archivo}: {e}")
        finally:
            # Limpiar archivo de prueba
            if os.path.exists(nombre_archivo):
                os.remove(nombre_archivo)

def probar_procesamiento_completo():
    """Prueba el procesamiento completo con diferentes tama√±os de PDF"""
    processor = GeminiProcessor()
    
    print("\nüöÄ Probando procesamiento completo...")
    print("=" * 60)
    
    # Crear PDF de prueba
    test_pdf = "test_procesamiento.pdf"
    crear_pdf_simple(test_pdf, 3)  # 3 p√°ginas
    
    try:
        # Procesar PDF
        resultado = processor.procesar_pdf(test_pdf)
        
        print(f"üìä Resultados del procesamiento:")
        print(f"   √âxito: {resultado.get('exito', False)}")
        print(f"   Modelo utilizado: {resultado.get('modelo_utilizado', 'N/A')}")
        print(f"   Tiempo de procesamiento: {resultado.get('tiempo_procesamiento_segundos', 0)} segundos")
        print(f"   Banco detectado: {resultado.get('banco_detectado', 'N/A')}")
        print(f"   Total movimientos: {resultado.get('total_movimientos_extraidos', 0)}")
        
        if resultado.get('exito'):
            print("   ‚úÖ Procesamiento exitoso")
        else:
            print(f"   ‚ùå Error: {resultado.get('mensaje', 'Error desconocido')}")
            
    except Exception as e:
        print(f"‚ùå Error en procesamiento completo: {e}")
    finally:
        # Limpiar archivo de prueba
        if os.path.exists(test_pdf):
            os.remove(test_pdf)

if __name__ == "__main__":
    print("üß™ TEST: Selecci√≥n Autom√°tica de Modelo Gemini")
    print("=" * 60)
    
    # Verificar configuraci√≥n
    try:
        processor = GeminiProcessor()
        print("‚úÖ Configuraci√≥n de Gemini correcta")
    except Exception as e:
        print(f"‚ùå Error de configuraci√≥n: {e}")
        sys.exit(1)
    
    # Ejecutar pruebas
    probar_seleccion_modelo()
    probar_procesamiento_completo()
    
    print("\nüéâ Pruebas completadas!") 