#!/usr/bin/env python3
"""
Script para probar todas las rutas disponibles del sistema de conciliaci√≥n bancaria
"""

import requests
import json
import sys
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1"

def print_header():
    """Imprimir encabezado"""
    print("=" * 60)
    print("üß™ TESTER DE RUTAS - SISTEMA DE CONCILIACI√ìN BANCARIA")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Base URL: {BASE_URL}")
    print()

def test_endpoint(url, method="GET", data=None, description=""):
    """Probar un endpoint espec√≠fico"""
    try:
        print(f"üîç Probando: {description}")
        print(f"   URL: {url}")
        print(f"   M√©todo: {method}")
        
        if method == "GET":
            response = requests.get(url, timeout=10)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=10)
        elif method == "PATCH":
            response = requests.patch(url, json=data, timeout=10)
        
        if response.status_code == 200:
            print(f"   ‚úÖ Status: {response.status_code}")
            try:
                result = response.json()
                if isinstance(result, dict) and len(result) > 0:
                    print(f"   üìÑ Respuesta: {json.dumps(result, indent=2, ensure_ascii=False)[:200]}...")
                else:
                    print(f"   üìÑ Respuesta: {result}")
            except:
                print(f"   üìÑ Respuesta: {response.text[:100]}...")
        else:
            print(f"   ‚ùå Status: {response.status_code}")
            print(f"   üìÑ Error: {response.text[:200]}...")
        
        print()
        return response.status_code == 200
        
    except Exception as e:
        print(f"   üí• Error: {e}")
        print()
        return False

def test_basic_endpoints():
    """Probar endpoints b√°sicos"""
    print("üìã PROBANDO ENDPOINTS B√ÅSICOS")
    print("-" * 40)
    
    endpoints = [
        ("/", "GET", None, "Endpoint ra√≠z"),
        ("/health", "GET", None, "Health check"),
        ("/info", "GET", None, "Informaci√≥n de la aplicaci√≥n"),
        ("/modules", "GET", None, "Informaci√≥n de m√≥dulos"),
        ("/docs", "GET", None, "Documentaci√≥n Swagger"),
        ("/redoc", "GET", None, "Documentaci√≥n ReDoc")
    ]
    
    success_count = 0
    for url, method, data, desc in endpoints:
        if test_endpoint(f"{BASE_URL}{url}", method, data, desc):
            success_count += 1
    
    print(f"‚úÖ Endpoints b√°sicos: {success_count}/{len(endpoints)} exitosos")
    print()

def test_conciliacion_endpoints():
    """Probar endpoints de conciliaci√≥n"""
    print("üè¶ PROBANDO ENDPOINTS DE CONCILIACI√ìN")
    print("-" * 40)
    
    # Endpoints que no requieren par√°metros espec√≠ficos
    endpoints = [
        ("/conciliacion/empresas", "GET", None, "Listar empresas contribuyentes"),
    ]
    
    success_count = 0
    for url, method, data, desc in endpoints:
        if test_endpoint(f"{API_BASE}{url}", method, data, desc):
            success_count += 1
    
    print(f"‚úÖ Endpoints de conciliaci√≥n: {success_count}/{len(endpoints)} exitosos")
    print()

def test_specific_endpoints():
    """Probar endpoints que requieren par√°metros espec√≠ficos"""
    print("üéØ PROBANDO ENDPOINTS ESPEC√çFICOS")
    print("-" * 40)
    
    # Obtener empresas primero para usar sus IDs
    try:
        response = requests.get(f"{API_BASE}/conciliacion/empresas", timeout=10)
        if response.status_code == 200:
            empresas = response.json()
            if empresas and len(empresas) > 0:
                empresa_id = empresas[0].get('id', 1)  # Usar la primera empresa
                
                endpoints = [
                    (f"/conciliacion/reporte/{empresa_id}", "GET", None, f"Reporte de conciliaci√≥n (empresa {empresa_id})"),
                    (f"/conciliacion/movimientos/{empresa_id}", "GET", None, f"Movimientos bancarios (empresa {empresa_id})"),
                    (f"/conciliacion/archivos/{empresa_id}", "GET", None, f"Archivos bancarios (empresa {empresa_id})"),
                    (f"/conciliacion/estadisticas/{empresa_id}", "GET", None, f"Estad√≠sticas (empresa {empresa_id})"),
                ]
                
                success_count = 0
                for url, method, data, desc in endpoints:
                    if test_endpoint(f"{API_BASE}{url}", method, data, desc):
                        success_count += 1
                
                print(f"‚úÖ Endpoints espec√≠ficos: {success_count}/{len(endpoints)} exitosos")
            else:
                print("‚ö†Ô∏è No hay empresas disponibles para probar endpoints espec√≠ficos")
        else:
            print("‚ùå No se pudieron obtener empresas para probar endpoints espec√≠ficos")
    except Exception as e:
        print(f"‚ùå Error obteniendo empresas: {e}")
    
    print()

def test_documentation():
    """Probar acceso a documentaci√≥n"""
    print("üìö PROBANDO DOCUMENTACI√ìN")
    print("-" * 40)
    
    docs_urls = [
        ("/docs", "Documentaci√≥n Swagger UI"),
        ("/redoc", "Documentaci√≥n ReDoc"),
        ("/openapi.json", "Especificaci√≥n OpenAPI")
    ]
    
    success_count = 0
    for url, desc in docs_urls:
        try:
            response = requests.get(f"{BASE_URL}{url}", timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {desc}: Accesible")
                success_count += 1
            else:
                print(f"‚ùå {desc}: Status {response.status_code}")
        except Exception as e:
            print(f"‚ùå {desc}: Error - {e}")
    
    print(f"‚úÖ Documentaci√≥n: {success_count}/{len(docs_urls)} accesible")
    print()

def show_available_routes():
    """Mostrar todas las rutas disponibles"""
    print("üó∫Ô∏è RUTAS DISPONIBLES")
    print("-" * 40)
    
    routes = {
        "Endpoints B√°sicos": {
            "GET /": "Informaci√≥n del sistema",
            "GET /health": "Estado de salud del sistema",
            "GET /info": "Informaci√≥n detallada",
            "GET /modules": "Informaci√≥n de m√≥dulos"
        },
        "Documentaci√≥n": {
            "GET /docs": "Swagger UI",
            "GET /redoc": "ReDoc",
            "GET /openapi.json": "Especificaci√≥n OpenAPI"
        },
        "API Conciliaci√≥n": {
            "GET /api/v1/conciliacion/empresas": "Listar empresas contribuyentes",
            "POST /api/v1/conciliacion/subir-estado-cuenta": "Subir PDF bancario",
            "POST /api/v1/conciliacion/ejecutar": "Ejecutar conciliaci√≥n",
            "GET /api/v1/conciliacion/reporte/{empresa_id}": "Obtener reporte",
            "GET /api/v1/conciliacion/movimientos/{empresa_id}": "Listar movimientos",
            "GET /api/v1/conciliacion/archivos/{empresa_id}": "Listar archivos",
            "GET /api/v1/conciliacion/estadisticas/{empresa_id}": "Estad√≠sticas",
            "PATCH /api/v1/conciliacion/movimientos/{movimiento_id}": "Actualizar movimiento"
        }
    }
    
    for category, endpoints in routes.items():
        print(f"\nüìÇ {category}:")
        for route, description in endpoints.items():
            print(f"   {route}")
            print(f"      ‚îî‚îÄ {description}")
    
    print()

def main():
    """Funci√≥n principal"""
    print_header()
    
    # Verificar que el servidor est√© ejecut√°ndose
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå El servidor no est√° ejecut√°ndose correctamente")
            print("Ejecuta: python3 -m uvicorn app.core.main:app --reload --host 0.0.0.0 --port 8000")
            sys.exit(1)
    except Exception as e:
        print("‚ùå No se puede conectar al servidor")
        print("Aseg√∫rate de que est√© ejecut√°ndose en http://localhost:8000")
        sys.exit(1)
    
    print("‚úÖ Servidor conectado correctamente")
    print()
    
    # Mostrar rutas disponibles
    show_available_routes()
    
    # Probar endpoints
    test_basic_endpoints()
    test_conciliacion_endpoints()
    test_specific_endpoints()
    test_documentation()
    
    print("=" * 60)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print("=" * 60)
    print("üí° Para m√°s informaci√≥n visita:")
    print(f"   üìñ Documentaci√≥n: {BASE_URL}/docs")
    print(f"   üîß Health Check: {BASE_URL}/health")
    print(f"   üìä Informaci√≥n: {BASE_URL}/info")

if __name__ == "__main__":
    main() 